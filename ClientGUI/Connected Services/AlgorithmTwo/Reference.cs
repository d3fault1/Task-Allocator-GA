//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientGUI.AlgorithmTwo {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AlgorithmTwo.ICompute")]
    public interface ICompute {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompute/Run", ReplyAction="http://tempuri.org/ICompute/RunResponse")]
        int[][] Run(Common.TaskData[] Tasks, Common.ProcessorData[] Processors, double Runtime, double Timeout);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICompute/Run", ReplyAction="http://tempuri.org/ICompute/RunResponse")]
        System.Threading.Tasks.Task<int[][]> RunAsync(Common.TaskData[] Tasks, Common.ProcessorData[] Processors, double Runtime, double Timeout);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IComputeChannel : ClientGUI.AlgorithmTwo.ICompute, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ComputeClient : System.ServiceModel.ClientBase<ClientGUI.AlgorithmTwo.ICompute>, ClientGUI.AlgorithmTwo.ICompute {
        
        public ComputeClient() {
        }
        
        public ComputeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ComputeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComputeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ComputeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int[][] Run(Common.TaskData[] Tasks, Common.ProcessorData[] Processors, double Runtime, double Timeout) {
            return base.Channel.Run(Tasks, Processors, Runtime, Timeout);
        }
        
        public System.Threading.Tasks.Task<int[][]> RunAsync(Common.TaskData[] Tasks, Common.ProcessorData[] Processors, double Runtime, double Timeout) {
            return base.Channel.RunAsync(Tasks, Processors, Runtime, Timeout);
        }
    }
}
